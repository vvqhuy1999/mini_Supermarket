package com.example.mini_supermarket.rest.controller;

import com.example.mini_supermarket.entity.KhachHang;
import com.example.mini_supermarket.service.KhachHangService;
import com.example.mini_supermarket.dto.CustomerRegistrationRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/khachhang")
@CrossOrigin(origins = "*")
@Tag(name = "Kh√°ch h√†ng", description = "API qu·∫£n l√Ω kh√°ch h√†ng")
public class KhachHangRestController {

    @Autowired
    private KhachHangService khachHangService;

    @Operation(summary = "L·∫•y t·∫•t c·∫£ kh√°ch h√†ng", description = "Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng ch∆∞a b·ªã x√≥a")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng", 
                    content = @Content(mediaType = "application/json", 
                            schema = @Schema(implementation = KhachHang.class))),
            @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    @GetMapping
    public ResponseEntity<List<KhachHang>> getAllKhachHang() {
        try {
            List<KhachHang> khachHangs = khachHangService.findAllActive();
            return new ResponseEntity<>(khachHangs, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @Operation(summary = "L·∫•y kh√°ch h√†ng theo ID", description = "Tr·∫£ v·ªÅ th√¥ng tin kh√°ch h√†ng theo ID (ch·ªâ l·∫•y kh√°ch h√†ng ch∆∞a b·ªã x√≥a)")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "T√¨m th·∫•y kh√°ch h√†ng", 
                    content = @Content(mediaType = "application/json", 
                            schema = @Schema(implementation = KhachHang.class))),
            @ApiResponse(responseCode = "404", description = "Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng"),
            @ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    @GetMapping("/{id}")
    public ResponseEntity<KhachHang> getKhachHangById(
            @Parameter(description = "ID c·ªßa kh√°ch h√†ng", required = true) @PathVariable String id) {
        try {
            KhachHang khachHang = khachHangService.findActiveById(id);
            if (khachHang != null) {
                return new ResponseEntity<>(khachHang, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Th√™m kh√°ch h√†ng m·ªõi
    @PostMapping
    public ResponseEntity<KhachHang> createKhachHang(@RequestBody KhachHang khachHang) {
        try {
            KhachHang savedKhachHang = khachHangService.save(khachHang);
            return new ResponseEntity<>(savedKhachHang, HttpStatus.CREATED);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // C·∫≠p nh·∫≠t kh√°ch h√†ng
    @PutMapping("/{id}")
    public ResponseEntity<KhachHang> updateKhachHang(@PathVariable String id, @RequestBody KhachHang khachHang) {
        try {
            KhachHang existingKhachHang = khachHangService.findActiveById(id);
            if (existingKhachHang != null) {
                khachHang.setMaKH(id); // ƒê·∫£m b·∫£o ID kh√¥ng thay ƒë·ªïi
                khachHang.setIsDeleted(false); // ƒê·∫£m b·∫£o kh√¥ng b·ªã ƒë√°nh d·∫•u l√† ƒë√£ x√≥a
                KhachHang updatedKhachHang = khachHangService.update(khachHang);
                return new ResponseEntity<>(updatedKhachHang, HttpStatus.OK);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // X√≥a kh√°ch h√†ng (soft delete - ch·ªâ ƒë√°nh d·∫•u isDeleted = true)
    @DeleteMapping("/{id}")
    public ResponseEntity<HttpStatus> deleteKhachHang(@PathVariable String id) {
        try {
            KhachHang existingKhachHang = khachHangService.findActiveById(id);
            if (existingKhachHang != null) {
                khachHangService.softDeleteById(id);
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            } else {
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * ƒêƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng m·ªõi (bao g·ªìm c·∫£ t√†i kho·∫£n ƒëƒÉng nh·∫≠p)
     */
    @Operation(
        summary = "üéØ ƒêƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng m·ªõi", 
        description = """
            **Ch·ª©c nƒÉng:** T·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p v√† th√¥ng tin kh√°ch h√†ng trong m·ªôt b∆∞·ªõc
            
            **Quy tr√¨nh:**
            1. T·∫°o t√†i kho·∫£n NguoiDung (email, m·∫≠t kh·∫©u)
            2. T·∫°o th√¥ng tin KhachHang (h·ªç t√™n, SƒêT, ƒë·ªãa ch·ªâ)
            3. Li√™n k·∫øt hai b·∫£ng v·ªõi nhau
            
            **D·ªØ li·ªáu b·∫Øt bu·ªôc:**
            - ‚úÖ email: ƒê·ªãa ch·ªâ email d√πng ƒë·ªÉ ƒëƒÉng nh·∫≠p
            - ‚úÖ matKhau: M·∫≠t kh·∫©u (s·∫Ω ƒë∆∞·ª£c m√£ h√≥a t·ª± ƒë·ªông)
            - ‚úÖ hoTen: H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß
            - ‚úÖ sdt: S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá
            
            **D·ªØ li·ªáu t√πy ch·ªçn:**
            - diaChi: ƒê·ªãa ch·ªâ kh√°ch h√†ng
            
            **Sau khi ƒëƒÉng k√Ω th√†nh c√¥ng:**
            - C√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng email/password v·ª´a t·∫°o
            - M√£ kh√°ch h√†ng ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông (KH + 6 k√Ω t·ª±)
            - Vai tr√≤ m·∫∑c ƒë·ªãnh: Kh√°ch h√†ng (VaiTro = 3)
            - Lo·∫°i kh√°ch h√†ng m·∫∑c ƒë·ªãnh: "Th∆∞·ªùng"
            """
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "‚úÖ ƒêƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng", 
                    content = @Content(mediaType = "application/json", 
                            schema = @Schema(implementation = KhachHang.class))),
            @ApiResponse(responseCode = "400", description = "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"),
            @ApiResponse(responseCode = "409", description = "‚ùå Email ƒë√£ t·ªìn t·∫°i"),
            @ApiResponse(responseCode = "500", description = "‚ùå L·ªói server")
    })
    @PostMapping("/register")
    public ResponseEntity<?> registerCustomerAccount(
            @Parameter(description = "Th√¥ng tin ƒëƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng", required = true)
            @RequestBody CustomerRegistrationRequest request) {
        
        try {
            // Validation c∆° b·∫£n
            Map<String, String> errors = validateRegistrationRequest(request);
            if (!errors.isEmpty()) {
                return ResponseEntity.badRequest().body(Map.of(
                    "success", false,
                    "message", "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!",
                    "errors", errors
                ));
            }
            
            // ƒêƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng
            KhachHang newCustomer = khachHangService.registerCustomerAccount(
                request.getEmail(),
                request.getMatKhau(),
                request.getHoTen(),
                request.getSdt(),
                request.getDiaChi()
            );
            
            // T·∫°o response th√†nh c√¥ng
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "ƒêƒÉng k√Ω t√†i kho·∫£n kh√°ch h√†ng th√†nh c√¥ng!");
            response.put("customer", newCustomer);
            response.put("login_info", Map.of(
                "email", request.getEmail(),
                "message", "C√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b·∫±ng email v√† m·∫≠t kh·∫©u v·ª´a t·∫°o"
            ));
            
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
            
        } catch (RuntimeException e) {
            // L·ªói t·ª´ business logic (email ƒë√£ t·ªìn t·∫°i, validation, etc.)
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", e.getMessage());
            errorResponse.put("error_type", "business_logic");
            
            // Ki·ªÉm tra lo·∫°i l·ªói ƒë·ªÉ tr·∫£ v·ªÅ status code ph√π h·ª£p
            if (e.getMessage().contains("ƒë√£ t·ªìn t·∫°i")) {
                return ResponseEntity.status(HttpStatus.CONFLICT).body(errorResponse);
            } else {
                return ResponseEntity.badRequest().body(errorResponse);
            }
            
        } catch (Exception e) {
            // L·ªói server kh√¥ng mong mu·ªën
            e.printStackTrace();
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "L·ªói server: " + e.getMessage());
            errorResponse.put("error_type", "server_error");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    
    /**
     * Validate d·ªØ li·ªáu ƒëƒÉng k√Ω
     */
    private Map<String, String> validateRegistrationRequest(CustomerRegistrationRequest request) {
        Map<String, String> errors = new HashMap<>();
        
        if (request == null) {
            errors.put("general", "Request body kh√¥ng ƒë∆∞·ª£c null");
            return errors;
        }
        
        // Validate email
        if (request.getEmail() == null || request.getEmail().trim().isEmpty()) {
            errors.put("email", "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        } else if (!request.getEmail().matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
            errors.put("email", "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng");
        }
        
        // Validate m·∫≠t kh·∫©u
        if (request.getMatKhau() == null || request.getMatKhau().trim().isEmpty()) {
            errors.put("matKhau", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        } else if (request.getMatKhau().length() < 6) {
            errors.put("matKhau", "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±");
        }
        
        // Validate h·ªç t√™n
        if (request.getHoTen() == null || request.getHoTen().trim().isEmpty()) {
            errors.put("hoTen", "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        } else if (request.getHoTen().trim().length() < 2) {
            errors.put("hoTen", "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±");
        }
        
        // Validate s·ªë ƒëi·ªán tho·∫°i
        if (request.getSdt() == null || request.getSdt().trim().isEmpty()) {
            errors.put("sdt", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        } else if (!request.getSdt().matches("^[0-9]{10,11}$")) {
            errors.put("sdt", "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10-11 ch·ªØ s·ªë");
        }
        
        return errors;
    }
} 