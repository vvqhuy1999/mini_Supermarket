package com.example.mini_supermarket.rest.controller;

import com.example.mini_supermarket.dto.ApiResponse;
import com.example.mini_supermarket.dto.AuthenticationResponse;
import com.example.mini_supermarket.entity.NguoiDung;
import com.example.mini_supermarket.service.AuthenticationService;
import com.example.mini_supermarket.service.TokenBlacklistService;
import com.example.mini_supermarket.util.JwtUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Tag(name = "X√°c th·ª±c", description = "API ƒëƒÉng nh·∫≠p v√† x√°c th·ª±c ng∆∞·ªùi d√πng")
public class AuthenticationController {
    
    AuthenticationService authenticationService;
    JwtUtil jwtUtil;
    TokenBlacklistService tokenBlacklistService;
    
    public AuthenticationController(AuthenticationService authenticationService, JwtUtil jwtUtil, TokenBlacklistService tokenBlacklistService) {
        this.authenticationService = authenticationService;
        this.jwtUtil = jwtUtil;
        this.tokenBlacklistService = tokenBlacklistService;
    }
    
    /**
     * ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
     */
    @Operation(summary = "ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng", description = "X√°c th·ª±c ng∆∞·ªùi d√πng b·∫±ng email/m√£ ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", 
                    content = @Content(mediaType = "application/json", 
                            schema = @Schema(implementation = ApiResponse.class))),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "X√°c th·ª±c th·∫•t b·∫°i"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    @PostMapping("/log-in")
    public ResponseEntity<ApiResponse<AuthenticationResponse>> authenticate(
            @Parameter(description = "Th√¥ng tin ƒëƒÉng nh·∫≠p (email ho·∫∑c maNguoiDung + matKhau)", required = true)
            @RequestBody NguoiDung loginRequest) {
        
        try {
            // Validation
            if (loginRequest == null) {
                return ResponseEntity.badRequest().body(
                    ApiResponse.<AuthenticationResponse>builder()
                        .success(false)
                        .message("Request body kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                        .error("Null request")
                        .build()
                );
            }
            
            // T·∫°o username t·ª´ email ho·∫∑c m√£ ng∆∞·ªùi d√πng
            String username = loginRequest.getEmail() != null ? loginRequest.getEmail() : loginRequest.getMaNguoiDung();
            String password = loginRequest.getMatKhau();
            
            if (username == null || username.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(
                    ApiResponse.<AuthenticationResponse>builder()
                        .success(false)
                        .message("Email ho·∫∑c m√£ ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                        .error("Missing username")
                        .build()
                );
            }
            
            if (password == null || password.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(
                    ApiResponse.<AuthenticationResponse>builder()
                        .success(false)
                        .message("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                        .error("Missing password")
                        .build()
                );
            }
            
            AuthenticationResponse authResponse = authenticationService.authenticate(username, password);
            
            ApiResponse<AuthenticationResponse> response = ApiResponse.<AuthenticationResponse>builder()
                    .result(authResponse)
                    .success(authResponse.isAuthenticated())
                    .message(authResponse.getMessage())
                    .build();
            
            if (authResponse.isAuthenticated()) {
                return ResponseEntity.ok(response);
            } else {
                return ResponseEntity.badRequest().body(response);
            }
            
        } catch (Exception e) {
            ApiResponse<AuthenticationResponse> errorResponse = ApiResponse.<AuthenticationResponse>builder()
                    .success(false)
                    .message("L·ªói x√°c th·ª±c: " + e.getMessage())
                    .error(e.getMessage())
                    .build();
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    /**
     * Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
     */
    @Operation(summary = "Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p", description = "Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ƒëƒÉng nh·∫≠p hay kh√¥ng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Ki·ªÉm tra th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Ch∆∞a ƒëƒÉng nh·∫≠p")
    })
    @GetMapping("/status")
    public ResponseEntity<ApiResponse<String>> checkAuthStatus(
            @Parameter(description = "JWT token ƒë·ªÉ ki·ªÉm tra", required = false)
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(401).body(
                ApiResponse.<String>builder()
                    .success(false)
                    .message("Token kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu!")
                    .error("Missing or invalid token")
                    .build()
            );
        }
        
        String token = authHeader.substring(7); // Lo·∫°i b·ªè "Bearer "
        
        if (!jwtUtil.validateToken(token)) {
            return ResponseEntity.status(401).body(
                ApiResponse.<String>builder()
                    .success(false)
                    .message("Token ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá!")
                    .error("Token expired or invalid")
                    .build()
            );
        }
        
        String username = jwtUtil.getUsernameFromToken(token);
        String role = jwtUtil.getRoleFromToken(token);
        
        ApiResponse<String> response = ApiResponse.<String>builder()
                .result("Authenticated")
                .success(true)
                .message("Ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p: " + username + " - " + role)
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Validate JWT token
     */
    @Operation(summary = "Validate JWT token", description = "Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa JWT token")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Token h·ª£p l·ªá"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Token kh√¥ng h·ª£p l·ªá")
    })
    @PostMapping("/validate-token")
    public ResponseEntity<ApiResponse<Map<String, Object>>> validateToken(
            @Parameter(description = "JWT token c·∫ßn validate", required = true)
            @RequestBody Map<String, String> request) {
        
        String token = request.get("token");
        
        if (token == null || token.trim().isEmpty()) {
            return ResponseEntity.badRequest().body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                    .error("Missing token")
                    .build()
            );
        }
        
        if (!jwtUtil.validateToken(token)) {
            return ResponseEntity.status(401).body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!")
                    .error("Invalid or expired token")
                    .build()
            );
        }
        
        String username = jwtUtil.getUsernameFromToken(token);
        String role = jwtUtil.getRoleFromToken(token);
        Date expiration = jwtUtil.getExpirationFromToken(token);
        
        Map<String, Object> tokenInfo = new HashMap<>();
        tokenInfo.put("username", username);
        tokenInfo.put("role", role);
        tokenInfo.put("expiration", expiration);
        tokenInfo.put("valid", true);
        
        ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                .result(tokenInfo)
                .success(true)
                .message("Token h·ª£p l·ªá!")
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * ƒêƒÉng xu·∫•t t·ªïng h·ª£p - H·ªó tr·ª£ c·∫£ OAuth2 v√† t√†i kho·∫£n th∆∞·ªùng
     */
    @Operation(
        summary = "üîê ƒêƒÉng xu·∫•t t·ªïng h·ª£p", 
        description = """
            **Ch·ª©c nƒÉng:** ƒêƒÉng xu·∫•t cho t·∫•t c·∫£ lo·∫°i t√†i kho·∫£n
            
            **H·ªó tr·ª£:**
            - üë§ T√†i kho·∫£n th∆∞·ªùng (email/password)
            - üåê T√†i kho·∫£n Google OAuth2
            - üìò T√†i kho·∫£n Facebook OAuth2
            
            **Ho·∫°t ƒë·ªông:**
            - üö´ Blacklist JWT token hi·ªán t·∫°i
            - üóëÔ∏è Clear session data
            - ‚úÖ Logout th√†nh c√¥ng cho m·ªçi lo·∫°i t√†i kho·∫£n
            
            **L∆∞u √Ω:**
            - Ch·ªâ logout kh·ªèi ·ª©ng d·ª•ng n√†y
            - Google/Facebook account v·∫´n ƒëƒÉng nh·∫≠p trong browser
            - L·∫ßn ƒëƒÉng nh·∫≠p sau v·ªõi OAuth2 s·∫Ω d·ªÖ d√†ng h∆°n
            
            **Headers:** Authorization: Bearer {JWT_TOKEN}
            """
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "‚ùå Token kh√¥ng h·ª£p l·ªá"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "‚ùå L·ªói server")
    })
    @PostMapping("/log-out")
    public ResponseEntity<ApiResponse<Map<String, Object>>> logout(
            @Parameter(description = "JWT token c·∫ßn logout", required = false)
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        
        Map<String, Object> result = new HashMap<>();
        
        try {
            // Ki·ªÉm tra Authorization header
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                result.put("token_provided", false);
                result.put("logout_type", "no_token");
                result.put("message", "Kh√¥ng c√≥ token - ƒëƒÉng xu·∫•t c∆° b·∫£n");
                
                return ResponseEntity.ok().body(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(true)
                        .message("ƒêƒÉng xu·∫•t th√†nh c√¥ng (kh√¥ng c√≥ token)")
                        .result(result)
                        .build()
                );
            }
            
            String token = authHeader.substring(7); // Lo·∫°i b·ªè "Bearer "
            result.put("token_provided", true);
            
            // Ki·ªÉm tra format token c∆° b·∫£n tr∆∞·ªõc khi validate
            if (token == null || token.trim().isEmpty()) {
                result.put("token_valid", false);
                result.put("logout_type", "empty_token");
                result.put("message", "Token r·ªóng - ƒëƒÉng xu·∫•t c∆° b·∫£n");
                
                return ResponseEntity.ok().body(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(true)
                        .message("ƒêƒÉng xu·∫•t th√†nh c√¥ng (token r·ªóng)")
                        .result(result)
                        .build()
                );
            }
            
            // Ki·ªÉm tra format JWT c∆° b·∫£n (ph·∫£i c√≥ 3 ph·∫ßn)
            String[] tokenParts = token.split("\\.");
            if (tokenParts.length != 3) {
                result.put("token_valid", false);
                result.put("logout_type", "malformed_token");
                result.put("token_parts", tokenParts.length);
                result.put("message", "Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JWT - ƒëƒÉng xu·∫•t c∆° b·∫£n");
                
                return ResponseEntity.ok().body(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(true)
                        .message("ƒêƒÉng xu·∫•t th√†nh c√¥ng (token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng)")
                        .result(result)
                        .build()
                );
            }
            
            // Validate token chi ti·∫øt
            boolean isTokenValid = false;
            try {
                isTokenValid = jwtUtil.validateToken(token);
            } catch (Exception e) {
                // Log l·ªói nh∆∞ng v·∫´n cho ph√©p logout th√†nh c√¥ng
                result.put("validation_error", e.getMessage());
            }
            
            if (!isTokenValid) {
                result.put("token_valid", false);
                result.put("logout_type", "invalid_token");
                result.put("message", "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n - ƒëƒÉng xu·∫•t c∆° b·∫£n");
                
                return ResponseEntity.ok().body(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(true)
                        .message("ƒêƒÉng xu·∫•t th√†nh c√¥ng (token kh√¥ng h·ª£p l·ªá)")
                        .result(result)
                        .build()
                );
            }
            
            result.put("token_valid", true);
            
            // L·∫•y th√¥ng tin t·ª´ token
            String username = jwtUtil.getUsernameFromToken(token);
            String role = jwtUtil.getRoleFromToken(token);
            
            result.put("username", username);
            result.put("role", role);
            
            // X√°c ƒë·ªãnh lo·∫°i t√†i kho·∫£n
            String accountType = "REGULAR";
            if (username != null && username.contains("@")) {
                // C√≥ th·ªÉ l√† OAuth2 account (th∆∞·ªùng d√πng email)
                accountType = "OAUTH2_LIKELY";
            }
            result.put("account_type", accountType);
            
            // Th√™m token v√†o blacklist ƒë·ªÉ v√¥ hi·ªáu h√≥a (n·∫øu c√≥ th·ªÉ)
            try {
                tokenBlacklistService.blacklistToken(token);
                result.put("token_blacklisted", true);
            } catch (Exception e) {
                // N·∫øu kh√¥ng th·ªÉ blacklist, v·∫´n ti·∫øp t·ª•c logout
                result.put("token_blacklisted", false);
                result.put("blacklist_error", e.getMessage());
            }
            result.put("logout_type", "complete");
            
            // Th√¥ng b√°o ph√π h·ª£p v·ªõi lo·∫°i t√†i kho·∫£n
            String message;
            if (accountType.equals("OAUTH2_LIKELY")) {
                message = "ƒêƒÉng xu·∫•t th√†nh c√¥ng! Token ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a. " +
                         "L∆∞u √Ω: Google/Facebook account v·∫´n ƒëƒÉng nh·∫≠p trong browser.";
                result.put("oauth2_note", "Google/Facebook session v·∫´n ho·∫°t ƒë·ªông trong browser");
            } else {
                message = "ƒêƒÉng xu·∫•t th√†nh c√¥ng! Token ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a.";
            }
            
            result.put("success", true);
            result.put("message", message);
            
            ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                    .result(result)
                    .success(true)
                    .message(message)
                    .build();
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            result.put("error", e.getMessage());
            result.put("success", false);
            
            ApiResponse<Map<String, Object>> errorResponse = ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("L·ªói ƒëƒÉng xu·∫•t: " + e.getMessage())
                    .error(e.getMessage())
                    .result(result)
                    .build();
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    /**
     * L·∫•y th√¥ng tin blacklist (cho admin)
     */
    @Operation(summary = "L·∫•y th√¥ng tin blacklist", description = "L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ c√°c token b·ªã blacklist (ch·ªâ d√†nh cho admin)")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Kh√¥ng c√≥ quy·ªÅn")
    })
    @GetMapping("/blacklist-info")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getBlacklistInfo() {
        try {
            Map<String, Object> blacklistDetails = tokenBlacklistService.getBlacklistDetails();
            
            ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                    .result(blacklistDetails)
                    .success(true)
                    .message("L·∫•y th√¥ng tin blacklist th√†nh c√¥ng")
                    .build();
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            ApiResponse<Map<String, Object>> errorResponse = ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("L·ªói l·∫•y th√¥ng tin blacklist: " + e.getMessage())
                    .error(e.getMessage())
                    .build();
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    /**
     * Ki·ªÉm tra token c√≥ trong blacklist kh√¥ng
     */
    @Operation(summary = "Ki·ªÉm tra token trong blacklist", description = "Ki·ªÉm tra m·ªôt token c·ª• th·ªÉ c√≥ trong blacklist kh√¥ng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "Token kh√¥ng h·ª£p l·ªá")
    })
    @PostMapping("/check-blacklist")
    public ResponseEntity<ApiResponse<Map<String, Object>>> checkTokenInBlacklist(
            @Parameter(description = "JWT token c·∫ßn ki·ªÉm tra", required = true)
            @RequestBody Map<String, String> request) {
        
        try {
            String token = request.get("token");
            
            if (token == null || token.trim().isEmpty()) {
                return ResponseEntity.badRequest().body(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(false)
                        .message("Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                        .error("Missing token")
                        .build()
                );
            }
            
            Map<String, Object> tokenDetails = tokenBlacklistService.getTokenDetails(token);
            
            if (tokenDetails == null) {
                // Token kh√¥ng c√≥ trong blacklist
                Map<String, Object> result = new HashMap<>();
                result.put("token", token);
                result.put("isBlacklisted", false);
                result.put("message", "Token kh√¥ng c√≥ trong blacklist");
                
                ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                        .result(result)
                        .success(true)
                        .message("Token kh√¥ng c√≥ trong blacklist")
                        .build();
                
                return ResponseEntity.ok(response);
            } else {
                // Token c√≥ trong blacklist
                tokenDetails.put("isBlacklisted", true);
                tokenDetails.put("message", "Token ƒë√£ b·ªã blacklist");
                
                ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                        .result(tokenDetails)
                        .success(true)
                        .message("Token ƒë√£ b·ªã blacklist")
                        .build();
                
                return ResponseEntity.ok(response);
            }
            
        } catch (Exception e) {
            ApiResponse<Map<String, Object>> errorResponse = ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("L·ªói ki·ªÉm tra blacklist: " + e.getMessage())
                    .error(e.getMessage())
                    .build();
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    

} 