package com.example.mini_supermarket.rest.controller;

import com.example.mini_supermarket.dto.ApiResponse;
import com.example.mini_supermarket.dto.AuthenticationResponse;
import com.example.mini_supermarket.entity.NguoiDung;
import com.example.mini_supermarket.service.OAuth2Service;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.AccessLevel;
import lombok.experimental.FieldDefaults;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.util.Map;
import java.util.HashMap;
import java.util.Optional;
import com.example.mini_supermarket.repository.NguoiDungRepository;
import org.springframework.http.HttpStatus;

@RestController
@RequestMapping("/api/oauth2")
@CrossOrigin(origins = "*")
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
@Tag(name = "üîê OAuth2 Authentication", description = "Complete OAuth2 Google & Facebook Login System with JWT Token Management")
public class OAuth2Controller {
    
    private final OAuth2Service oAuth2Service;
    private final NguoiDungRepository nguoiDungRepository;
    
    @Autowired
    public OAuth2Controller(OAuth2Service oAuth2Service, NguoiDungRepository nguoiDungRepository) {
        this.oAuth2Service = oAuth2Service;
        this.nguoiDungRepository = nguoiDungRepository;
    }
    
    // Constructor m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh l·ªói dependency
    public OAuth2Controller() {
        this.oAuth2Service = null;
        this.nguoiDungRepository = null;
    }
    
    /**
     * Callback cho Google OAuth2
     */
    @Operation(summary = "Google OAuth2 Callback", description = "X·ª≠ l√Ω callback t·ª´ Google OAuth2")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "L·ªói x√°c th·ª±c"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    @GetMapping("/callback/google")
    public ResponseEntity<ApiResponse<AuthenticationResponse>> googleCallback(
            @Parameter(description = "OAuth2 User t·ª´ Google")
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        try {
            if (oauth2User == null) {
                return ResponseEntity.badRequest().body(
                    ApiResponse.<AuthenticationResponse>builder()
                        .success(false)
                        .message("Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Google!")
                        .error("OAuth2 user is null")
                        .build()
                );
            }
            
            AuthenticationResponse authResponse = oAuth2Service.processGoogleLogin(oauth2User);
            
            ApiResponse<AuthenticationResponse> response = ApiResponse.<AuthenticationResponse>builder()
                    .result(authResponse)
                    .success(authResponse.isAuthenticated())
                    .message(authResponse.getMessage())
                    .build();
            
            if (authResponse.isAuthenticated()) {
                return ResponseEntity.ok(response);
            } else {
                return ResponseEntity.badRequest().body(response);
            }
            
        } catch (Exception e) {
            ApiResponse<AuthenticationResponse> errorResponse = ApiResponse.<AuthenticationResponse>builder()
                    .success(false)
                    .message("L·ªói x√°c th·ª±c Google: " + e.getMessage())
                    .error(e.getMessage())
                    .build();
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    
    /**
     * Callback cho Facebook OAuth2
     */
    @Operation(summary = "Facebook OAuth2 Callback", description = "X·ª≠ l√Ω callback t·ª´ Facebook OAuth2")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "ƒêƒÉng nh·∫≠p th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "L·ªói x√°c th·ª±c"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "500", description = "L·ªói server")
    })
    @GetMapping("/callback/facebook")
    public ResponseEntity<ApiResponse<AuthenticationResponse>> facebookCallback(
            @Parameter(description = "OAuth2 User t·ª´ Facebook")
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        try {
            if (oauth2User == null) {
                return ResponseEntity.badRequest().body(
                    ApiResponse.<AuthenticationResponse>builder()
                        .success(false)
                        .message("Kh√¥ng th·ªÉ x√°c th·ª±c v·ªõi Facebook!")
                        .error("OAuth2 user is null")
                        .build()
                );
            }
            
            // Debug: Log th√¥ng tin OAuth2 user
            System.out.println("Facebook OAuth2 User: " + oauth2User.getName());
            System.out.println("Facebook OAuth2 Attributes: " + oauth2User.getAttributes());
            
            AuthenticationResponse authResponse = oAuth2Service.processFacebookLogin(oauth2User);
            
            ApiResponse<AuthenticationResponse> response = ApiResponse.<AuthenticationResponse>builder()
                    .result(authResponse)
                    .success(authResponse.isAuthenticated())
                    .message(authResponse.getMessage())
                    .build();
            
            if (authResponse.isAuthenticated()) {
                return ResponseEntity.ok(response);
            } else {
                return ResponseEntity.badRequest().body(response);
            }
            
        } catch (Exception e) {
            System.err.println("Facebook OAuth2 Controller Error: " + e.getMessage());
            e.printStackTrace();
            
            ApiResponse<AuthenticationResponse> errorResponse = ApiResponse.<AuthenticationResponse>builder()
                    .success(false)
                    .message("L·ªói x√°c th·ª±c Facebook: " + e.getMessage())
                    .error(e.getMessage())
                    .build();
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }
    

    
    /**
     * Test endpoint ƒë·ªÉ ki·ªÉm tra OAuth2 configuration
     */
    @Operation(summary = "Test OAuth2 Configuration", description = "Ki·ªÉm tra c·∫•u h√¨nh OAuth2")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng")
    })
    @GetMapping("/test-config")
    public ResponseEntity<ApiResponse<Map<String, String>>> testOAuth2Config() {
        
        Map<String, String> config = new HashMap<>();
        config.put("status", "OAuth2 Controller is running");
        config.put("message", "OAuth2 endpoints are available");
        config.put("google_configured", "true");
        config.put("facebook_configured", "true");
        config.put("google_client_id", "1096787831677-f9nhpe4jc0be40sc5s910qihfv22etrl.apps.googleusercontent.com");
        config.put("facebook_client_id", "1793399401565005");
        config.put("google_redirect_uri", "http://localhost:8080/login/oauth2/code/google");
        config.put("facebook_redirect_uri", "http://localhost:8080/login/oauth2/code/facebook");
        config.put("test_urls", "http://localhost:8080/oauth2/authorization/google, http://localhost:8080/oauth2/authorization/facebook");
        
        if (oAuth2Service != null) {
            Map<String, String> serviceConfig = oAuth2Service.getOAuth2Configuration();
            config.putAll(serviceConfig);
        }
        
        ApiResponse<Map<String, String>> response = ApiResponse.<Map<String, String>>builder()
                .result(config)
                .success(true)
                .message("OAuth2 Controller is running")
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Endpoint ƒë·ªÉ l·∫•y th√¥ng tin user khi ƒë√£ ƒëƒÉng nh·∫≠p OAuth2
     */
    @Operation(summary = "Get OAuth2 User Info", description = "L·∫•y th√¥ng tin user t·ª´ OAuth2 khi ƒë√£ ƒëƒÉng nh·∫≠p")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Ch∆∞a ƒëƒÉng nh·∫≠p")
    })
    @GetMapping("/user-info")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getUserInfo(
            @Parameter(description = "OAuth2 User")
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        if (oauth2User == null) {
            return ResponseEntity.status(401).body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("Ch∆∞a ƒëƒÉng nh·∫≠p OAuth2!")
                    .error("Not authenticated")
                    .build()
            );
        }
        
        Map<String, Object> userInfo = oauth2User.getAttributes();
        
        // Th√™m th√¥ng tin ph√¢n t√≠ch chi ti·∫øt
        Map<String, Object> detailedInfo = new HashMap<>();
        detailedInfo.put("raw_attributes", userInfo); // T·∫•t c·∫£ th√¥ng tin g·ªëc t·ª´ Google
        
        // Ph√¢n t√≠ch t·ª´ng tr∆∞·ªùng th√¥ng tin
        detailedInfo.put("email", userInfo.get("email"));
        detailedInfo.put("name", userInfo.get("name"));
        detailedInfo.put("given_name", userInfo.get("given_name"));
        detailedInfo.put("family_name", userInfo.get("family_name"));
        detailedInfo.put("picture", userInfo.get("picture"));
        detailedInfo.put("sub", userInfo.get("sub")); // Google User ID
        detailedInfo.put("locale", userInfo.get("locale"));
        detailedInfo.put("email_verified", userInfo.get("email_verified"));
        detailedInfo.put("hd", userInfo.get("hd")); // Hosted domain
        detailedInfo.put("iat", userInfo.get("iat")); // Issued at
        detailedInfo.put("exp", userInfo.get("exp")); // Expires at
        detailedInfo.put("azp", userInfo.get("azp")); // Authorized party
        detailedInfo.put("aud", userInfo.get("aud")); // Audience
        detailedInfo.put("iss", userInfo.get("iss")); // Issuer
        
        // Th·ªëng k√™ th√¥ng tin
        detailedInfo.put("total_attributes", userInfo.size());
        detailedInfo.put("attribute_names", userInfo.keySet());
        
        ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                .result(detailedInfo)
                .success(true)
                .message("Th√¥ng tin chi ti·∫øt OAuth2 user t·ª´ Google")
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * ‚úÖ OAuth2 Success Handler - Ch√≠nh th·ª©c x·ª≠ l√Ω th√†nh c√¥ng ƒëƒÉng nh·∫≠p
     */
    @Operation(
        summary = "‚úÖ OAuth2 Success Handler", 
        description = """
            üéØ **Main OAuth2 Success Endpoint**
            
            **Ch·ª©c nƒÉng ch√≠nh:**
            - üîç Ph√¢n t√≠ch d·ªØ li·ªáu OAuth2 User (Google/Facebook)
            - üíæ T·ª± ƒë·ªông l∆∞u/c·∫≠p nh·∫≠t user v√†o database
            - üé´ T·∫°o JWT token cho session
            - üìä Tr·∫£ v·ªÅ th√¥ng tin user v√† token
            
            **Flow ho·∫°t ƒë·ªông:**
            1. User ƒëƒÉng nh·∫≠p Google/Facebook th√†nh c√¥ng
            2. OAuth2 provider redirect v·ªÅ endpoint n√†y
            3. System x·ª≠ l√Ω v√† l∆∞u user data
            4. T·∫°o JWT token v√† tr·∫£ v·ªÅ response
            
            **Provider h·ªó tr·ª£:** Google, Facebook
            
            **‚ö†Ô∏è L∆∞u √Ω:** Ch·ªâ g·ªçi ƒë∆∞·ª£c sau khi ƒëƒÉng nh·∫≠p OAuth2 th√†nh c√¥ng
            """
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "200", 
                description = "‚úÖ Success - User authenticated v√† JWT token ƒë∆∞·ª£c t·∫°o"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "401", 
                description = "‚ùå Unauthorized - Ch∆∞a ƒëƒÉng nh·∫≠p OAuth2"
            )
    })
    @GetMapping("/success")
    public ResponseEntity<ApiResponse<Map<String, Object>>> oauth2Success(
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        Map<String, Object> result = new HashMap<>();
        
        if (oauth2User == null) {
            result.put("message", "OAuth2 login successful but no user data");
            result.put("user", null);
            result.put("saved_to_database", false);
        } else {
            try {
                // X√°c ƒë·ªãnh provider d·ª±a tr√™n attributes
                Map<String, Object> attributes = oauth2User.getAttributes();
                String provider = "Unknown";
                
                if (attributes.containsKey("sub") && attributes.containsKey("email_verified")) {
                    provider = "Google";
                } else if (attributes.containsKey("id") && !attributes.containsKey("email_verified")) {
                    provider = "Facebook";
                }
                
                // X·ª≠ l√Ω v√† l∆∞u v√†o database
                AuthenticationResponse authResponse;
                if (provider.equals("Google")) {
                    authResponse = oAuth2Service.processGoogleLogin(oauth2User);
                } else if (provider.equals("Facebook")) {
                    authResponse = oAuth2Service.processFacebookLogin(oauth2User);
                } else {
                    // Fallback cho tr∆∞·ªùng h·ª£p kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c provider
                    authResponse = oAuth2Service.processGoogleLogin(oauth2User);
                }
                
                result.put("message", "OAuth2 login successful and saved to database");
                result.put("user", oauth2User.getAttributes());
                result.put("provider", provider);
                result.put("saved_to_database", authResponse.isAuthenticated());
                result.put("auth_response", authResponse);
                result.put("jwt_token", authResponse.getToken()); // Th√™m token v√†o response
                
                System.out.println("‚úÖ OAuth2 Success: " + provider + " user saved to database");
                
            } catch (Exception e) {
                System.err.println("‚ùå OAuth2 Success Error: " + e.getMessage());
                e.printStackTrace();
                
                result.put("message", "OAuth2 login successful but failed to save to database");
                result.put("user", oauth2User.getAttributes());
                result.put("saved_to_database", false);
                result.put("error", e.getMessage());
            }
        }
        
        ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                .result(result)
                .success(true)
                .message("OAuth2 login successful")
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Endpoint x·ª≠ l√Ω OAuth2 failure callback
     */
    @Operation(summary = "OAuth2 Failure Callback", description = "X·ª≠ l√Ω callback th·∫•t b·∫°i t·ª´ OAuth2")
    @GetMapping("/failure")
    public ResponseEntity<ApiResponse<Map<String, String>>> oauth2Failure() {
        
        Map<String, String> result = new HashMap<>();
        result.put("message", "OAuth2 login failed");
        
        ApiResponse<Map<String, String>> response = ApiResponse.<Map<String, String>>builder()
                .result(result)
                .success(false)
                .message("OAuth2 login failed")
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Endpoint ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt th√¥ng tin OAuth2
     */
    @Operation(summary = "Analyze OAuth2 User Data", description = "Ph√¢n t√≠ch chi ti·∫øt th√¥ng tin user t·ª´ OAuth2")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Ch∆∞a ƒëƒÉng nh·∫≠p")
    })
    @GetMapping("/analyze")
    public ResponseEntity<ApiResponse<Map<String, Object>>> analyzeOAuth2User(
            @Parameter(description = "OAuth2 User")
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        if (oauth2User == null) {
            return ResponseEntity.status(401).body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("Ch∆∞a ƒëƒÉng nh·∫≠p OAuth2!")
                    .error("Not authenticated")
                    .build()
            );
        }
        
        Map<String, Object> attributes = oauth2User.getAttributes();
        Map<String, Object> analysis = new HashMap<>();
        
        // X√°c ƒë·ªãnh provider d·ª±a tr√™n attributes
        String provider = "Unknown";
        if (attributes.containsKey("sub") && attributes.containsKey("email_verified")) {
            provider = "Google OAuth2";
        } else if (attributes.containsKey("id") && !attributes.containsKey("email_verified")) {
            provider = "Facebook OAuth2";
        }
        
        // Th√¥ng tin c∆° b·∫£n
        analysis.put("provider", provider);
        analysis.put("total_attributes", attributes.size());
        analysis.put("all_attribute_names", attributes.keySet());
        
        // Ph√¢n t√≠ch t·ª´ng tr∆∞·ªùng
        analysis.put("email", attributes.get("email"));
        analysis.put("name", attributes.get("name"));
        analysis.put("id", attributes.get("id"));
        analysis.put("sub", attributes.get("sub"));
        
        if (provider.equals("Google OAuth2")) {
            analysis.put("email_verified", attributes.get("email_verified"));
            analysis.put("given_name", attributes.get("given_name"));
            analysis.put("family_name", attributes.get("family_name"));
            analysis.put("picture_url", attributes.get("picture"));
            analysis.put("google_user_id", attributes.get("sub"));
            analysis.put("locale", attributes.get("locale"));
            analysis.put("hosted_domain", attributes.get("hd"));
            
            // Th√¥ng tin JWT token
            analysis.put("token_issued_at", attributes.get("iat"));
            analysis.put("token_expires_at", attributes.get("exp"));
            analysis.put("authorized_party", attributes.get("azp"));
            analysis.put("audience", attributes.get("aud"));
            analysis.put("issuer", attributes.get("iss"));
        } else if (provider.equals("Facebook OAuth2")) {
            analysis.put("first_name", attributes.get("first_name"));
            analysis.put("last_name", attributes.get("last_name"));
            analysis.put("middle_name", attributes.get("middle_name"));
            analysis.put("verified", attributes.get("verified"));
            analysis.put("facebook_user_id", attributes.get("id"));
        }
        
        // Raw data ƒë·ªÉ ph√¢n t√≠ch
        analysis.put("raw_oauth2_data", attributes);
        
        ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                .result(analysis)
                .success(true)
                .message("Ph√¢n t√≠ch chi ti·∫øt th√¥ng tin " + provider)
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Endpoint debug ƒë·∫∑c bi·ªát cho Facebook OAuth2
     */
    @Operation(summary = "Debug Facebook OAuth2", description = "Debug th√¥ng tin Facebook OAuth2")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Ch∆∞a ƒëƒÉng nh·∫≠p")
    })
    @GetMapping("/debug/facebook")
    public ResponseEntity<ApiResponse<Map<String, Object>>> debugFacebookOAuth2(
            @Parameter(description = "OAuth2 User t·ª´ Facebook")
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        Map<String, Object> debugInfo = new HashMap<>();
        
        if (oauth2User == null) {
            debugInfo.put("status", "No OAuth2 user found");
            debugInfo.put("message", "Ch∆∞a ƒëƒÉng nh·∫≠p Facebook OAuth2");
            debugInfo.put("error", "OAuth2 user is null");
            
            ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                    .result(debugInfo)
                    .success(false)
                    .message("Ch∆∞a ƒëƒÉng nh·∫≠p Facebook OAuth2!")
                    .build();
            
            return ResponseEntity.status(401).body(response);
        }
        
        Map<String, Object> attributes = oauth2User.getAttributes();
        
        debugInfo.put("status", "Facebook OAuth2 user found");
        debugInfo.put("user_name", oauth2User.getName());
        debugInfo.put("authorities", oauth2User.getAuthorities());
        debugInfo.put("total_attributes", attributes.size());
        debugInfo.put("all_attributes", attributes);
        
        // Ph√¢n t√≠ch t·ª´ng tr∆∞·ªùng Facebook
        debugInfo.put("facebook_id", attributes.get("id"));
        debugInfo.put("email", attributes.get("email"));
        debugInfo.put("name", attributes.get("name"));
        debugInfo.put("first_name", attributes.get("first_name"));
        debugInfo.put("last_name", attributes.get("last_name"));
        debugInfo.put("middle_name", attributes.get("middle_name"));
        debugInfo.put("verified", attributes.get("verified"));
        
        // Th·ª≠ x·ª≠ l√Ω ƒëƒÉng nh·∫≠p
        try {
            AuthenticationResponse authResponse = oAuth2Service.processFacebookLogin(oauth2User);
            debugInfo.put("auth_response", authResponse);
            debugInfo.put("auth_success", authResponse.isAuthenticated());
            debugInfo.put("auth_message", authResponse.getMessage());
        } catch (Exception e) {
            debugInfo.put("auth_error", e.getMessage());
            debugInfo.put("auth_stack_trace", e.getStackTrace());
        }
        
        ApiResponse<Map<String, Object>> response = ApiResponse.<Map<String, Object>>builder()
                .result(debugInfo)
                .success(true)
                .message("Debug th√¥ng tin Facebook OAuth2")
                .build();
        
        return ResponseEntity.ok(response);
    }
    
    /**
     * Endpoint ƒë·ªÉ ki·ªÉm tra email tr√πng l·∫∑p
     */
    @Operation(summary = "Check Email Duplicate", description = "Ki·ªÉm tra email c√≥ tr√πng l·∫∑p trong database kh√¥ng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "Email kh√¥ng h·ª£p l·ªá")
    })
    @GetMapping("/check-email")
    public ResponseEntity<ApiResponse<Map<String, Object>>> checkEmailDuplicate(
            @Parameter(description = "Email c·∫ßn ki·ªÉm tra")
            @RequestParam String email) {
        try {
            // Chu·∫©n h√≥a email
            email = email.trim().toLowerCase();
            
            // Ki·ªÉm tra format email
            if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
                return ResponseEntity.badRequest()
                        .body(ApiResponse.<Map<String, Object>>builder()
                                .success(false)
                                .message("Email kh√¥ng h·ª£p l·ªá")
                                .build());
            }
            
            // T√¨m ng∆∞·ªùi d√πng theo email
            Optional<NguoiDung> nguoiDungOpt = nguoiDungRepository.findByEmail(email);
            
            Map<String, Object> result = new HashMap<>();
            result.put("valid", true);
            result.put("exists", nguoiDungOpt.isPresent());
            
            if (nguoiDungOpt.isPresent()) {
                NguoiDung nguoiDung = nguoiDungOpt.get();
                result.put("isDeleted", nguoiDung.getIsDeleted());
                result.put("vaiTro", nguoiDung.getVaiTro());
                result.put("sub", nguoiDung.getSub()); // Th√™m th√¥ng tin sub
                result.put("accountType", getAccountType(nguoiDung.getMaNguoiDung()));
                
                if (nguoiDung.getIsDeleted()) {
                    result.put("message", "Email ƒë√£ t·ªìn t·∫°i nh∆∞ng t√†i kho·∫£n ƒë√£ b·ªã x√≥a");
                } else {
                    result.put("message", "Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
                }
            } else {
                result.put("message", "Email ch∆∞a t·ªìn t·∫°i trong h·ªá th·ªëng");
            }
            
            return ResponseEntity.ok(ApiResponse.<Map<String, Object>>builder()
                    .success(true)
                    .message("Ki·ªÉm tra email th√†nh c√¥ng")
                    .result(result)
                    .build());
            
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(ApiResponse.<Map<String, Object>>builder()
                            .success(false)
                            .message("L·ªói ki·ªÉm tra email: " + e.getMessage())
                            .build());
        }
    }
    
    @Operation(summary = "Check OAuth2 Sub", description = "Ki·ªÉm tra OAuth2 ID (sub) c√≥ t·ªìn t·∫°i trong database kh√¥ng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "Sub kh√¥ng h·ª£p l·ªá")
    })
            @GetMapping("/check-sub")
        public ResponseEntity<ApiResponse<Map<String, Object>>> checkSub(
                @Parameter(description = "OAuth2 ID (sub) c·∫ßn ki·ªÉm tra")
                @RequestParam String sub) {
            try {
                // Ki·ªÉm tra sub kh√¥ng r·ªóng
                if (sub == null || sub.trim().isEmpty()) {
                    return ResponseEntity.badRequest()
                            .body(ApiResponse.<Map<String, Object>>builder()
                                    .success(false)
                                    .message("Sub kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
                                    .build());
                }
                
                // T√¨m ng∆∞·ªùi d√πng theo sub
                Optional<NguoiDung> nguoiDungOpt = nguoiDungRepository.findBySub(sub);
                
                Map<String, Object> result = new HashMap<>();
                result.put("exists", nguoiDungOpt.isPresent());
                
                if (nguoiDungOpt.isPresent()) {
                    NguoiDung nguoiDung = nguoiDungOpt.get();
                    result.put("email", nguoiDung.getEmail());
                    result.put("isDeleted", nguoiDung.getIsDeleted());
                    result.put("vaiTro", nguoiDung.getVaiTro());
                    result.put("maNguoiDung", nguoiDung.getMaNguoiDung());
                    result.put("accountType", getAccountType(nguoiDung.getMaNguoiDung()));
                    
                    if (nguoiDung.getIsDeleted()) {
                        result.put("message", "OAuth2 ID ƒë√£ t·ªìn t·∫°i nh∆∞ng t√†i kho·∫£n ƒë√£ b·ªã x√≥a");
                    } else {
                        result.put("message", "OAuth2 ID ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng");
                    }
                } else {
                    result.put("message", "OAuth2 ID ch∆∞a t·ªìn t·∫°i trong h·ªá th·ªëng");
                }
                
                return ResponseEntity.ok(ApiResponse.<Map<String, Object>>builder()
                        .success(true)
                        .message("Ki·ªÉm tra OAuth2 ID th√†nh c√¥ng")
                        .result(result)
                        .build());
                
            } catch (Exception e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(ApiResponse.<Map<String, Object>>builder()
                                .success(false)
                                .message("L·ªói ki·ªÉm tra OAuth2 ID: " + e.getMessage())
                                .build());
            }
        }
    
    /**
     * Endpoint ƒë·ªÉ l·∫•y JWT token sau khi ƒëƒÉng nh·∫≠p OAuth2
     */
    @Operation(summary = "Get JWT Token", description = "L·∫•y JWT token sau khi ƒëƒÉng nh·∫≠p OAuth2 th√†nh c√¥ng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "Ch∆∞a ƒëƒÉng nh·∫≠p")
    })
    @GetMapping("/get-token")
    public ResponseEntity<ApiResponse<Map<String, Object>>> getToken(
            @Parameter(description = "OAuth2 User")
            @AuthenticationPrincipal OAuth2User oauth2User) {
        
        Map<String, Object> result = new HashMap<>();
        
        if (oauth2User == null) {
            result.put("error", "Ch∆∞a ƒëƒÉng nh·∫≠p OAuth2");
            result.put("token", null);
            
            return ResponseEntity.status(401).body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("Ch∆∞a ƒëƒÉng nh·∫≠p OAuth2!")
                    .result(result)
                    .build()
            );
        }
        
        try {
            // X√°c ƒë·ªãnh provider
            Map<String, Object> attributes = oauth2User.getAttributes();
            String provider = "Unknown";
            String email = (String) attributes.get("email");
            
            if (attributes.containsKey("sub") && attributes.containsKey("email_verified")) {
                provider = "Google";
            } else if (attributes.containsKey("id") && !attributes.containsKey("email_verified")) {
                provider = "Facebook";
            }
            
            // X·ª≠ l√Ω v√† l·∫•y token
            AuthenticationResponse authResponse;
            if (provider.equals("Google")) {
                authResponse = oAuth2Service.processGoogleLogin(oauth2User);
            } else if (provider.equals("Facebook")) {
                authResponse = oAuth2Service.processFacebookLogin(oauth2User);
            } else {
                authResponse = oAuth2Service.processGoogleLogin(oauth2User); // Fallback
            }
            
            if (authResponse.isAuthenticated()) {
                result.put("jwt_token", authResponse.getToken());
                result.put("user_email", email);
                result.put("user_role", authResponse.getRole());
                result.put("provider", provider);
                result.put("user_info", authResponse.getUser());
                result.put("authenticated", true);
                result.put("token_type", "Bearer");
                
                return ResponseEntity.ok(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(true)
                        .message("L·∫•y JWT token th√†nh c√¥ng")
                        .result(result)
                        .build()
                );
            } else {
                result.put("error", authResponse.getMessage());
                result.put("token", null);
                
                return ResponseEntity.badRequest().body(
                    ApiResponse.<Map<String, Object>>builder()
                        .success(false)
                        .message("Kh√¥ng th·ªÉ l·∫•y token: " + authResponse.getMessage())
                        .result(result)
                        .build()
                );
            }
            
        } catch (Exception e) {
            result.put("error", e.getMessage());
            result.put("token", null);
            
            return ResponseEntity.internalServerError().body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("L·ªói l·∫•y token: " + e.getMessage())
                    .result(result)
                    .build()
            );
        }
    }
    
    /**
     * üîí Local Logout - ƒêƒÉng xu·∫•t kh·ªèi app (gi·ªØ Google session)
     */
    @Operation(
        summary = "üîí Local Logout", 
        description = """
            **M·ª•c ƒë√≠ch:** ƒêƒÉng xu·∫•t local kh·ªèi app
            
            **Ch·ª©c nƒÉng:**
            - üö´ Blacklist JWT token hi·ªán t·∫°i
            - üóëÔ∏è X√≥a session app (kh√¥ng ·∫£nh h∆∞·ªüng Google)
            - üîÑ Gi·ªØ nguy√™n Google login trong browser
            
            **K·∫øt qu·∫£:**
            - ‚úÖ User logout kh·ªèi app
            - üåê Google account v·∫´n ƒëƒÉng nh·∫≠p trong browser
            - ‚ö° L·∫ßn login sau kh√¥ng c·∫ßn nh·∫≠p password Google
            
            **Headers:** Authorization: Bearer {JWT_TOKEN}
            """
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "ƒêƒÉng xu·∫•t th√†nh c√¥ng")
    })
    @PostMapping("/logout")
    public ResponseEntity<ApiResponse<Map<String, Object>>> localLogout(
            @Parameter(description = "JWT Token ƒë·ªÉ blacklist")
            @RequestHeader(value = "Authorization", required = false) String authHeader) {
        
        Map<String, Object> result = new HashMap<>();
        
        try {
            // Extract token t·ª´ Authorization header
            String token = null;
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                token = authHeader.substring(7);
            }
            
            if (token != null) {
                // TODO: Add token to blacklist (n·∫øu c√≥ TokenBlacklistService)
                // tokenBlacklistService.blacklistToken(token);
                result.put("token_blacklisted", true);
                result.put("message", "Token ƒë√£ ƒë∆∞·ª£c blacklist");
            } else {
                result.put("token_blacklisted", false);
                result.put("message", "Kh√¥ng c√≥ token ƒë·ªÉ blacklist");
            }
            
            result.put("logout_type", "local");
            result.put("success", true);
            
            return ResponseEntity.ok(
                ApiResponse.<Map<String, Object>>builder()
                    .success(true)
                    .message("ƒêƒÉng xu·∫•t local th√†nh c√¥ng")
                    .result(result)
                    .build()
            );
            
        } catch (Exception e) {
            result.put("error", e.getMessage());
            result.put("success", false);
            
            return ResponseEntity.internalServerError().body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("L·ªói ƒëƒÉng xu·∫•t: " + e.getMessage())
                    .result(result)
                    .build()
            );
        }
    }
    
    /**
     * üåê Website Logout - ƒêƒÉng xu·∫•t ho√†n to√†n kh·ªèi website
     */
    @Operation(
        summary = "üåê Website Logout", 
        description = """
            **M·ª•c ƒë√≠ch:** ƒêƒÉng xu·∫•t ho√†n to√†n kh·ªèi website
            
            **Ch·ª©c nƒÉng:**
            - üö´ Blacklist JWT token
            - üóëÔ∏è Invalidate Spring Security session
            - üîÑ Clear t·∫•t c·∫£ session data
            
            **K·∫øt qu·∫£:**
            - ‚úÖ User logout ho√†n to√†n kh·ªèi website
            - üåê Google account v·∫´n login trong browser
            - ‚ö° L·∫ßn login sau v·∫´n d·ªÖ d√†ng (no password)
            
            **Headers:** Authorization: Bearer {JWT_TOKEN}
            
            **üí° Tip:** ƒê√¢y l√† logout th√¥ng th∆∞·ªùng nh·∫•t
            """
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "ƒêƒÉng xu·∫•t website th√†nh c√¥ng")
    })
    @PostMapping("/logout/website")
    public ResponseEntity<ApiResponse<Map<String, Object>>> websiteLogout(
            @Parameter(description = "JWT Token")
            @RequestHeader(value = "Authorization", required = false) String authHeader,
            HttpServletRequest request,
            HttpServletResponse response) {
        
        Map<String, Object> result = new HashMap<>();
        
        try {
            // Extract token t·ª´ Authorization header
            String token = null;
            if (authHeader != null && authHeader.startsWith("Bearer ")) {
                token = authHeader.substring(7);
            }
            
            if (token != null) {
                // TODO: Add token to blacklist
                // tokenBlacklistService.blacklistToken(token);
                result.put("token_blacklisted", true);
            }
            
            // Clear Spring Security session (ch·ªâ session website)
            HttpSession session = request.getSession(false);
            if (session != null) {
                session.invalidate();
                result.put("session_cleared", true);
            } else {
                result.put("session_cleared", false);
                result.put("session_note", "Kh√¥ng c√≥ session ƒë·ªÉ clear");
            }
            
            result.put("logout_type", "website");
            result.put("success", true);
            result.put("message", "ƒêƒÉng xu·∫•t kh·ªèi website th√†nh c√¥ng - Google account v·∫´n ƒëƒÉng nh·∫≠p trong browser");
            result.put("note", "Ch·ªâ logout kh·ªèi website n√†y, kh√¥ng ·∫£nh h∆∞·ªüng Google account c·ªßa b·∫°n");
            
            return ResponseEntity.ok(
                ApiResponse.<Map<String, Object>>builder()
                    .success(true)
                    .message("ƒêƒÉng xu·∫•t website th√†nh c√¥ng")
                    .result(result)
                    .build()
            );
            
        } catch (Exception e) {
            result.put("error", e.getMessage());
            result.put("success", false);
            
            return ResponseEntity.internalServerError().body(
                ApiResponse.<Map<String, Object>>builder()
                    .success(false)
                    .message("L·ªói ƒëƒÉng xu·∫•t website: " + e.getMessage())
                    .result(result)
                    .build()
            );
        }
    }
    
    /**
     * X√°c ƒë·ªãnh lo·∫°i t√†i kho·∫£n d·ª±a tr√™n m√£ ng∆∞·ªùi d√πng
     */
    private String getAccountType(String maNguoiDung) {
        if (maNguoiDung == null) {
            return "UNKNOWN";
        }
        // Ki·ªÉm tra d·ª±a v√†o format maNguoiDung m·ªõi (ND + 8 k√Ω t·ª±)
        if (maNguoiDung.matches("^ND[A-Z0-9]{8}$")) {
            return "OAUTH2_ACCOUNT";
        } else {
            return "REGULAR_ACCOUNT";
        }
    }
} 