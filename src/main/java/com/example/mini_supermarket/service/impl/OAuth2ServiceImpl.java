package com.example.mini_supermarket.service.impl;

import com.example.mini_supermarket.dto.AuthenticationResponse;
import com.example.mini_supermarket.entity.NguoiDung;
import com.example.mini_supermarket.repository.NguoiDungRepository;
import com.example.mini_supermarket.service.OAuth2Service;
import com.example.mini_supermarket.service.UserService;
import com.example.mini_supermarket.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;


@Service
public class OAuth2ServiceImpl implements OAuth2Service {
    
    private final NguoiDungRepository nguoiDungRepository;
    private final UserService userService;
    private final JwtUtil jwtUtil;
    
    @Value("${spring.security.oauth2.client.registration.google.client-id:}")
    private String googleClientId;
    
    @Value("${spring.security.oauth2.client.registration.facebook.client-id:}")
    private String facebookClientId;
    
    @Autowired
    public OAuth2ServiceImpl(NguoiDungRepository nguoiDungRepository, UserService userService, JwtUtil jwtUtil) {
        this.nguoiDungRepository = nguoiDungRepository;
        this.userService = userService;
        this.jwtUtil = jwtUtil;
    }
    
    @Override
    public AuthenticationResponse processGoogleLogin(OAuth2User oauth2User) {
        try {
            Map<String, Object> attributes = oauth2User.getAttributes();
            
            // L·∫•y th√¥ng tin t·ª´ Google
            String email = (String) attributes.get("email");
            String name = (String) attributes.get("name");
            String picture = (String) attributes.get("picture");
            String sub = (String) attributes.get("sub"); // Google user ID
            
            if (email == null || email.trim().isEmpty()) {
                AuthenticationResponse response = new AuthenticationResponse();
                response.setAuthenticated(false);
                response.setMessage("Email kh√¥ng ƒë∆∞·ª£c cung c·∫•p t·ª´ Google!");
                return response;
            }
            
            // Chu·∫©n h√≥a email
            email = email.trim().toLowerCase();
            
            // V·∫§N ƒê·ªÄ 2: Ki·ªÉm tra C·∫¢ sub V√Ä email trong database
            Optional<NguoiDung> nguoiDungByEmail = nguoiDungRepository.findByEmail(email);
            Optional<NguoiDung> nguoiDungBySub = nguoiDungRepository.findBySub(sub);
            
            NguoiDung nguoiDung;
            boolean isNewUser = false;
            
            // Logic ki·ªÉm tra: ∆∞u ti√™n sub tr∆∞·ªõc, sau ƒë√≥ ƒë·∫øn email
            if (nguoiDungBySub.isPresent()) {
                // ƒê√£ t·ªìn t·∫°i t√†i kho·∫£n v·ªõi sub n√†y -> ƒëƒÉng nh·∫≠p
                nguoiDung = nguoiDungBySub.get();
                System.out.println("üîë T√¨m th·∫•y t√†i kho·∫£n theo sub: " + sub + " cho email: " + email);
                
                // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã x√≥a kh√¥ng
                if (nguoiDung.getIsDeleted()) {
                    AuthenticationResponse response = new AuthenticationResponse();
                    response.setAuthenticated(false);
                    response.setMessage("T√†i kho·∫£n ƒë√£ b·ªã x√≥a!");
                    return response;
                }
                
            } else if (nguoiDungByEmail.isPresent()) {
                // C√≥ t√†i kho·∫£n v·ªõi email n√†y nh∆∞ng ch∆∞a c√≥ sub -> c·∫≠p nh·∫≠t sub cho t√†i kho·∫£n th∆∞·ªùng
                nguoiDung = nguoiDungByEmail.get();
                System.out.println("üìß T√¨m th·∫•y t√†i kho·∫£n theo email: " + email + ", c·∫≠p nh·∫≠t sub: " + sub);
                
                // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã x√≥a kh√¥ng
                if (nguoiDung.getIsDeleted()) {
                    AuthenticationResponse response = new AuthenticationResponse();
                    response.setAuthenticated(false);
                    response.setMessage("T√†i kho·∫£n ƒë√£ b·ªã x√≥a!");
                    return response;
                }
                
                // C·∫≠p nh·∫≠t sub cho t√†i kho·∫£n th∆∞·ªùng ƒë·ªÉ li√™n k·∫øt v·ªõi Google
                nguoiDung.setSub(sub);
                nguoiDungRepository.save(nguoiDung);
                System.out.println("üîó Li√™n k·∫øt t√†i kho·∫£n th∆∞·ªùng v·ªõi Google OAuth2");
                
            } else {
                // V·∫§N ƒê·ªÄ 1: T√†i kho·∫£n ho√†n to√†n m·ªõi -> T·ª∞ ƒê·ªòNG ƒêƒÇNG K√ù
                nguoiDung = new NguoiDung();
                nguoiDung.setEmail(email);
                nguoiDung.setVaiTro(3); // M·∫∑c ƒë·ªãnh l√† kh√°ch h√†ng (3)
                nguoiDung.setSub(sub); // L∆∞u Google ID v√†o tr∆∞·ªùng sub
                
                // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n cho OAuth2 user
                String randomPassword = UUID.randomUUID().toString();
                nguoiDung.setMatKhau(randomPassword); // UserService s·∫Ω t·ª± ƒë·ªông m√£ h√≥a
                
                // S·ª≠ d·ª•ng UserService ƒë·ªÉ ƒëƒÉng k√Ω (t·ª± ƒë·ªông t·∫°o maNguoiDung)
                nguoiDung = userService.registerUser(nguoiDung);
                isNewUser = true;
                
                System.out.println("‚úÖ T·ª∞ ƒê·ªòNG ƒêƒÇNG K√ù t√†i kho·∫£n m·ªõi cho Google OAuth2: " + email + " v·ªõi sub: " + sub + " v√† maNguoiDung: " + nguoiDung.getMaNguoiDung());
            }
            
            // V·∫§N ƒê·ªÄ 3: S·ª≠ d·ª•ng JwtUtil ƒë·ªÉ t·∫°o token th·∫≠t
            String role = getRoleName(nguoiDung.getVaiTro());
            String token = jwtUtil.generateToken(email, role);
            
            String message = isNewUser ? 
                    "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng! T√†i kho·∫£n m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o." : 
                    "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng!";
            
            AuthenticationResponse response = new AuthenticationResponse();
            response.setAuthenticated(true);
            response.setMessage(message);
            response.setUser(nguoiDung);
            response.setRole(role);
            response.setToken(token);
            return response;
                    
        } catch (Exception e) {
            System.err.println("Google OAuth2 Error: " + e.getMessage());
            e.printStackTrace();
            
            AuthenticationResponse response = new AuthenticationResponse();
            response.setAuthenticated(false);
            response.setMessage("L·ªói x·ª≠ l√Ω ƒëƒÉng nh·∫≠p Google: " + e.getMessage());
            return response;
        }
    }
    
    @Override
    public AuthenticationResponse processFacebookLogin(OAuth2User oauth2User) {
        try {
            Map<String, Object> attributes = oauth2User.getAttributes();
            
            // Debug: Log t·∫•t c·∫£ attributes ƒë·ªÉ ki·ªÉm tra
            System.out.println("Facebook OAuth2 Attributes: " + attributes);
            
            // L·∫•y th√¥ng tin t·ª´ Facebook - th·ª≠ nhi·ªÅu c√°ch kh√°c nhau
            String email = null;
            String name = null;
            String id = null;
            
            // Th·ª≠ l·∫•y email t·ª´ c√°c tr∆∞·ªùng kh√°c nhau
            if (attributes.get("email") != null) {
                email = (String) attributes.get("email");
            } else if (attributes.get("mail") != null) {
                email = (String) attributes.get("mail");
            }
            
            // Th·ª≠ l·∫•y name t·ª´ c√°c tr∆∞·ªùng kh√°c nhau
            if (attributes.get("name") != null) {
                name = (String) attributes.get("name");
            } else if (attributes.get("displayName") != null) {
                name = (String) attributes.get("displayName");
            }
            
            // Th·ª≠ l·∫•y ID t·ª´ c√°c tr∆∞·ªùng kh√°c nhau
            if (attributes.get("id") != null) {
                id = attributes.get("id").toString();
            } else if (attributes.get("sub") != null) {
                id = attributes.get("sub").toString();
            }
            
            // N·∫øu kh√¥ng c√≥ email, th·ª≠ t·∫°o email t·ª´ ID
            if (email == null || email.trim().isEmpty()) {
                if (id != null) {
                    email = "fb_" + id + "@facebook.com";
                } else {
                    AuthenticationResponse response = new AuthenticationResponse();
                    response.setAuthenticated(false);
                    response.setMessage("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin email t·ª´ Facebook! Vui l√≤ng ki·ªÉm tra quy·ªÅn truy c·∫≠p email.");
                    return response;
                }
            }
            
            // Chu·∫©n h√≥a email
            email = email.trim().toLowerCase();
            
            // V·∫§N ƒê·ªÄ 2: Ki·ªÉm tra C·∫¢ sub V√Ä email trong database
            Optional<NguoiDung> nguoiDungByEmail = nguoiDungRepository.findByEmail(email);
            Optional<NguoiDung> nguoiDungBySub = nguoiDungRepository.findBySub(id);
            
            NguoiDung nguoiDung;
            boolean isNewUser = false;
            
            // Logic ki·ªÉm tra: ∆∞u ti√™n sub tr∆∞·ªõc, sau ƒë√≥ ƒë·∫øn email
            if (nguoiDungBySub.isPresent()) {
                // ƒê√£ t·ªìn t·∫°i t√†i kho·∫£n v·ªõi sub n√†y -> ƒëƒÉng nh·∫≠p
                nguoiDung = nguoiDungBySub.get();
                System.out.println("üîë T√¨m th·∫•y t√†i kho·∫£n theo sub: " + id + " cho email: " + email);
                
                // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã x√≥a kh√¥ng
                if (nguoiDung.getIsDeleted()) {
                    AuthenticationResponse response = new AuthenticationResponse();
                    response.setAuthenticated(false);
                    response.setMessage("T√†i kho·∫£n ƒë√£ b·ªã x√≥a!");
                    return response;
                }
                
            } else if (nguoiDungByEmail.isPresent()) {
                // C√≥ t√†i kho·∫£n v·ªõi email n√†y nh∆∞ng ch∆∞a c√≥ sub -> c·∫≠p nh·∫≠t sub cho t√†i kho·∫£n th∆∞·ªùng
                nguoiDung = nguoiDungByEmail.get();
                System.out.println("üìß T√¨m th·∫•y t√†i kho·∫£n theo email: " + email + ", c·∫≠p nh·∫≠t sub: " + id);
                
                // Ki·ªÉm tra t√†i kho·∫£n c√≥ b·ªã x√≥a kh√¥ng
                if (nguoiDung.getIsDeleted()) {
                    AuthenticationResponse response = new AuthenticationResponse();
                    response.setAuthenticated(false);
                    response.setMessage("T√†i kho·∫£n ƒë√£ b·ªã x√≥a!");
                    return response;
                }
                
                // C·∫≠p nh·∫≠t sub cho t√†i kho·∫£n th∆∞·ªùng ƒë·ªÉ li√™n k·∫øt v·ªõi Facebook
                nguoiDung.setSub(id);
                nguoiDungRepository.save(nguoiDung);
                System.out.println("üîó Li√™n k·∫øt t√†i kho·∫£n th∆∞·ªùng v·ªõi Facebook OAuth2");
                
            } else {
                // V·∫§N ƒê·ªÄ 1: T√†i kho·∫£n ho√†n to√†n m·ªõi -> T·ª∞ ƒê·ªòNG ƒêƒÇNG K√ù
                nguoiDung = new NguoiDung();
                nguoiDung.setEmail(email);
                nguoiDung.setVaiTro(3); // M·∫∑c ƒë·ªãnh l√† kh√°ch h√†ng (3)
                nguoiDung.setSub(id); // L∆∞u Facebook ID v√†o tr∆∞·ªùng sub
                
                // T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n cho OAuth2 user
                String randomPassword = UUID.randomUUID().toString();
                nguoiDung.setMatKhau(randomPassword); // UserService s·∫Ω t·ª± ƒë·ªông m√£ h√≥a
                
                // S·ª≠ d·ª•ng UserService ƒë·ªÉ ƒëƒÉng k√Ω (t·ª± ƒë·ªông t·∫°o maNguoiDung)
                nguoiDung = userService.registerUser(nguoiDung);
                isNewUser = true;
                
                System.out.println("‚úÖ T·ª∞ ƒê·ªòNG ƒêƒÇNG K√ù t√†i kho·∫£n m·ªõi cho Facebook OAuth2: " + email + " v·ªõi sub: " + id + " v√† maNguoiDung: " + nguoiDung.getMaNguoiDung());
            }
            
            // V·∫§N ƒê·ªÄ 3: S·ª≠ d·ª•ng JwtUtil ƒë·ªÉ t·∫°o token th·∫≠t
            String role = getRoleName(nguoiDung.getVaiTro());
            String token = jwtUtil.generateToken(email, role);
            
            String message = isNewUser ? 
                    "ƒêƒÉng nh·∫≠p Facebook th√†nh c√¥ng! T√†i kho·∫£n m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o." : 
                    "ƒêƒÉng nh·∫≠p Facebook th√†nh c√¥ng!";
            
            AuthenticationResponse response = new AuthenticationResponse();
            response.setAuthenticated(true);
            response.setMessage(message);
            response.setUser(nguoiDung);
            response.setRole(role);
            response.setToken(token);
            return response;
                    
        } catch (Exception e) {
            System.err.println("Facebook OAuth2 Error: " + e.getMessage());
            e.printStackTrace();
            
            AuthenticationResponse response = new AuthenticationResponse();
            response.setAuthenticated(false);
            response.setMessage("L·ªói x·ª≠ l√Ω ƒëƒÉng nh·∫≠p Facebook: " + e.getMessage());
            return response;
        }
    }
    
    @Override
    public Map<String, String> getOAuth2Configuration() {
        Map<String, String> config = new HashMap<>();
        
        // Ki·ªÉm tra c·∫•u h√¨nh Google
        boolean googleConfigured = googleClientId != null && !googleClientId.trim().isEmpty();
        config.put("google_configured", String.valueOf(googleConfigured));
        config.put("google_client_id", googleClientId != null ? googleClientId : "not_configured");
        
        // Ki·ªÉm tra c·∫•u h√¨nh Facebook
        boolean facebookConfigured = facebookClientId != null && !facebookClientId.trim().isEmpty();
        config.put("facebook_configured", String.valueOf(facebookConfigured));
        config.put("facebook_client_id", facebookClientId != null ? facebookClientId : "not_configured");
        
        config.put("message", "OAuth2 endpoints are available");
        config.put("status", "OAuth2 Controller is working");
        config.put("google_redirect_uri", "http://localhost:8080/login/oauth2/code/google");
        config.put("facebook_redirect_uri", "http://localhost:8080/login/oauth2/code/facebook");
        
        return config;
    }
    
    /**
     * Chuy·ªÉn ƒë·ªïi vai tr√≤ t·ª´ database sang role name
     */
    private String getRoleName(Integer vaiTro) {
        if (vaiTro == null) {
            return "KHACH_HANG";
        }
        
        switch (vaiTro) {
            case 0:
                return "ADMIN";
            case 1:
                return "QUAN_LY";
            case 2:
                return "NHAN_VIEN";
            case 3:
            default:
                return "KHACH_HANG";
        }
    }
} 